#!/usr/bin/env ruby

require 'bundler/setup'
require 'github_crawl'
require 'highline'
require 'set'

# ---
# Command Line Prompts

cli = HighLine.new

repo_full_name = ENV['GITHUB_REPO'] || cli.ask('github repo in the form "{owner}/{repo}": ')
repo_full_name = 'kubernetes/kubernetes' if repo_full_name.nil? || repo_full_name.strip.empty?

if Octokit.login.nil? || Octokit.login.empty?
  github_user = cli.ask('github user: ')
  github_pass = cli.ask('github pass: ') { |q| q.echo = '*' }
  puts
  unless (github_user.nil? || github_user.empty?) && (github_pass.nil? || github_pass.empty?)
    Octokit.configure do |c|
      c.login = github_user
      c.password = github_pass
    end
    # # TODO: try to use an auth-token
    # auth = Octokit.create_authorization(:scopes => ["user"], :note => "GithubCrawl")
    # Octokit.bearer_token = auth[:token]
  end
end

# ---
# Github Crawling by repo
#
# Given the full name of a target github repository (e.g. "kubernetes/kubernetes" which refers to
# https://github.com/kubernetes/kubernetes/), fetch all of that project's contributors, and then fetch
# each contributor's repositories. Count how many times each repository appears across all contributors.
# Then print to stdout a summary of the top 10 repositories by count.

# Accumulate repository information in this repos hash; note that the
# keys are repository "name" strings and not "full_name" strings.
repos = {}

begin
  GithubCrawl::Cache.enable
  GithubCrawl.sql_enable if ENV['GITHUB_SQL']

  repo = GithubCrawl::Repo.new(full_name: repo_full_name)
  puts "RATE LIMIT:\t\t#{GithubCrawl.rate_limit.inspect}"

  # NOTE: some contributors are bots, but there is no data to differentiate
  # them from humans.  Assume all contributors are equal.

  contributors = repo.contributors
  repos[repo.name] = {
    url: repo.repo[:html_url],
    description: repo.repo[:description],
    contributors: contributors.map(&:login).to_set
  }

  contributors.each do |user|
    GithubCrawl.check_rate_limit
    user.repos.each do |user_repo|
      # Q: a user could fork a repository without ever contributing to it; so
      # does this need to check whether a user is also a contributor to
      # the repository?  If not, skip it?

      # NOTE: for a new repo that hasn't been seen before, it's initialized
      # with an empty set of contributors; it is not populated with all of
      # the contributors to _this_ user repository.  Only add contributors
      # to this repository if they are contributors to both the root or parent
      # repository and this repository.

      repos[user_repo.name] ||= {
        url: user_repo.repo[:html_url],
        description: user_repo.repo[:description],
        contributors: Set.new # this is intentional - it should be an empty set
      }
      repos[user_repo.name][:contributors] << user.login
    end
  end
rescue StandardError => err
  STDERR.puts("ABORTED! #{err.message}")
  exit(false)
end

# ---
# Report the most popular repositories among the contributors

# sort the repos by the number of users who list them among their repositories
repos_sorted = repos.sort { |r1, r2| r2[1][:contributors].size <=> r1[1][:contributors].size }

# report the repo contributor count and it's name for the top 10 repos
puts
repos_sorted.slice(0, 10).each do |repo|
  printf("%4d:\t%s\n", repo[1][:contributors].size, repo[1][:url])
end
puts

# Save the full report
file_name = File.join(GithubCrawl::DATA_PATH, 'repo_results.json')
f = File.open(file_name, 'w')
results = repos_sorted.collect { |repo| repo[1] }
f.write(JSON.pretty_generate(results))
f.flush
f.close
puts "All results are saved to #{file_name}"
